class DSU{
private:
    vector<int> parent;
    vector<int> size;
public:

    DSU(int n){
        parent.resize(n + 1);
        size.resize(n + 1);
        for(int i = 1; i <= n; i++){
            parent[i] = i;
            size[i] = 1;
        }
    }

    int find(int i){
        if(parent[i] == i )
            return i;
        return (parent[i] = find(parent[i]));
    }

    void Union(int a, int b){
        a = find(a);
        b = find(b);
        if( a != b ){
            if(size[a] < size[b])
                swap(a, b);
            parent[b] = a;
            size[a] += size[b];
        }
    }

    int getPar(int i){
        if( i != parent[i] ){
            parent[i] = getPar(parent[i]);
        }
        return parent[i];
    }

};
